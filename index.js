/*! For license information please see index.js.LICENSE.txt */
(()=>{"use strict";var __webpack_modules__={"./src/index.ts":(__unused_webpack_module,exports)=>{eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.WeightedRandomPicker = exports.RandomPicker = void 0;\nclass RandomPicker {\n    ar;\n    rndPicker;\n    constructor(ar) {\n        this.ar = ar;\n        this.rndPicker = new WeightedRandomPicker((val) => 100 / ar.length, (val) => val + (1 / ar.length) * 100, 100);\n        this.rndPicker.init(this.ar.length);\n    }\n    get() {\n        this.rndPicker.recoverAll();\n        const rnd = this.rndPicker.pickRandom();\n        this.rndPicker.reduceProbability(rnd);\n        return this.ar[rnd];\n    }\n}\nexports.RandomPicker = RandomPicker;\nclass WeightedRandomPicker {\n    reduceFn;\n    recoverFn;\n    maxWeight;\n    weightsCumulativeSum = [];\n    weights = [];\n    reducedSet = new Set([]);\n    constructor(reduceFn, recoverFn, maxWeight = 100) {\n        this.reduceFn = reduceFn;\n        this.recoverFn = recoverFn;\n        this.maxWeight = maxWeight;\n    }\n    init(length) {\n        this.weights = [];\n        for (let i = 0; i < length; i++) {\n            this.weights[i] = this.maxWeight;\n            this.weightsCumulativeSum[i] = this.maxWeight * (i + 1);\n        }\n        console.log(this.weightsCumulativeSum);\n    }\n    pickRandom() {\n        const rnd = Math.random() * this.weightsCumulativeSum.slice(-1)[0];\n        console.log(this.weights, rnd);\n        return this.weightsCumulativeSum.findIndex((sum) => {\n            return sum >= rnd;\n        });\n    }\n    reduceProbability(index) {\n        this.weights[index] = Math.max(0, this.reduceFn(this.weights[index]));\n        if (this.weights[index] < this.maxWeight) {\n            this.reducedSet.add(index);\n            this.rebuildCumulativeSum(index);\n        }\n    }\n    recoverAll() {\n        this.reducedSet.forEach((index) => {\n            this.weights[index] = Math.min(this.recoverFn(this.weights[index]), this.maxWeight);\n        });\n        const startRebuildIndex = Math.min(...Array.from(this.reducedSet));\n        this.reducedSet = new Set(Array.from(this.reducedSet).filter((index) => {\n            return this.weights[index] < this.maxWeight;\n        }));\n        this.rebuildCumulativeSum(startRebuildIndex);\n    }\n    rebuildCumulativeSum(firstChangedIndex = 0) {\n        let sum = 0;\n        this.weights.forEach((w, index) => {\n            sum += w;\n            this.weightsCumulativeSum[index] = sum;\n        });\n    }\n}\nexports.WeightedRandomPicker = WeightedRandomPicker;\nwindow['createRandomPicker'] = (array) => {\n    return new RandomPicker(array);\n};\nwindow['createWeightedRandomPicker'] = (reduceFn, recoverFn, maxWeight = 100) => {\n    return new WeightedRandomPicker(reduceFn, recoverFn, maxWeight);\n};\n\n\n//# sourceURL=webpack://magic-cards/./src/index.ts?")}},__webpack_exports__={};__webpack_modules__["./src/index.ts"](0,__webpack_exports__)})();